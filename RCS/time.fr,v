head	0.1;
access;
symbols;
locks
	murphy:0.1.0.255; strict;
comment	@# @;


0.1
date	2018.02.20.16.37.38;	author murphy;	state Exp;
branches
	0.1.0.29;
next	;

0.1.0.29
date	2018.02.20.16.37.38;	author murphy;	state Exp;
branches;
next	0.1.0.40;

0.1.0.40
date	2018.02.23.12.54.24;	author murphy;	state Exp;
branches;
next	0.1.0.77;

0.1.0.77
date	2018.02.23.13.52.27;	author murphy;	state Exp;
branches;
next	0.1.0.78;

0.1.0.78
date	2018.02.23.14.04.31;	author murphy;	state Exp;
branches;
next	0.1.0.101;

0.1.0.101
date	2018.02.23.14.37.06;	author murphy;	state Exp;
branches;
next	0.1.0.102;

0.1.0.102
date	2018.02.23.14.38.27;	author murphy;	state Exp;
branches;
next	0.1.0.103;

0.1.0.103
date	2018.02.23.14.39.51;	author murphy;	state Exp;
branches;
next	0.1.0.104;

0.1.0.104
date	2018.02.23.14.41.58;	author murphy;	state Exp;
branches;
next	0.1.0.106;

0.1.0.106
date	2018.02.23.14.47.09;	author murphy;	state Exp;
branches;
next	0.1.0.109;

0.1.0.109
date	2018.02.23.14.53.55;	author murphy;	state Exp;
branches;
next	0.1.0.114;

0.1.0.114
date	2018.02.23.14.59.11;	author murphy;	state Exp;
branches;
next	0.1.0.123;

0.1.0.123
date	2018.04.13.02.04.43;	author murphy;	state Exp;
branches;
next	0.1.0.129;

0.1.0.129
date	2018.04.13.02.28.50;	author murphy;	state Exp;
branches;
next	0.1.0.139;

0.1.0.139
date	2018.04.13.20.05.41;	author murphy;	state Exp;
branches;
next	0.1.0.148;

0.1.0.148
date	2018.04.14.01.17.45;	author murphy;	state Exp;
branches;
next	0.1.0.150;

0.1.0.150
date	2018.04.14.03.05.46;	author murphy;	state Exp;
branches;
next	0.1.0.163;

0.1.0.163
date	2018.09.10.21.36.38;	author murphy;	state Exp;
branches;
next	0.1.0.168;

0.1.0.168
date	2018.09.13.01.35.00;	author murphy;	state Exp;
branches;
next	0.1.0.204;

0.1.0.204
date	2018.09.18.14.18.35;	author murphy;	state Exp;
branches;
next	0.1.0.237;

0.1.0.237
date	2018.09.19.01.21.28;	author murphy;	state Exp;
branches;
next	0.1.0.238;

0.1.0.238
date	2018.09.19.01.22.57;	author murphy;	state Exp;
branches;
next	0.1.0.239;

0.1.0.239
date	2018.09.19.01.34.24;	author murphy;	state Exp;
branches;
next	0.1.0.240;

0.1.0.240
date	2018.09.19.01.37.59;	author murphy;	state Exp;
branches;
next	0.1.0.241;

0.1.0.241
date	2018.09.19.02.20.31;	author murphy;	state Exp;
branches;
next	0.1.0.242;

0.1.0.242
date	2018.09.19.02.21.14;	author murphy;	state Exp;
branches;
next	0.1.0.243;

0.1.0.243
date	2018.09.20.11.30.00;	author murphy;	state Exp;
branches;
next	0.1.0.250;

0.1.0.250
date	2018.09.21.13.06.35;	author murphy;	state Exp;
branches;
next	0.1.0.254;

0.1.0.254
date	2018.09.21.14.15.19;	author murphy;	state Exp;
branches;
next	0.1.0.255;

0.1.0.255
date	2018.09.21.14.16.33;	author murphy;	state Exp;
branches;
next	;


desc
@2018-02-20 11:25:33 gam-1
@


0.1
log
@0.1
@
text
@\ (c) 2014 Johns Hopkins University / Applied Physics Laboratory
\ Time management
decimal

\ * Time keeping module.  Provides management of time, used to tag data.

\ The function set-time sets the time of an upcoming time-tone; the
\ function sync-time, corresponding to the time-tone, sets the actual
\ time.  The function prop-time, called at 1kHz, propagates time between
\ the time-tones.  If sync-time stops (i.e. time-tones stop), prop-time
\ continues to propagate the time.  Set-time and sync-time will stop and
\ start together; when sync-time starts, the most recently received time
\ from set-time will be old.  Therefore, the time received by set-time is
\ "aged", and an old time will not be used by sync-time.  Prop-time
\ performs the aging function.  (In ground test, it is also possible to
\ create scenarios where sync-time occurs but set-time does not, e.g. in
\ raw mode.  The design above also handles this case.)

module> time

2variable future-time			\ time of next time tone
variable future-time-age		\ "age" of future time
2variable s/c-time			\ spacecraft time
variable s/c-time-sub			\ higher resolution time, 0 - 999 ms.

public:

: set-time	\ ( time-ls time-ms -- ) Set time of upcoming sync-time.
		\ Synchronization: disables interrupts.
   disable future-time 2!  0 future-time-age ! enable ;

: sync-time	\ ( -- ) Record time (from set-time) to actual time.
		\ Synchronization: user disables ints or calls from interrupt.
   future-time-age @@ 1 u<= if		\ if future time set recently
      future-time 2@@ s/c-time 2!	\ set time
      0 s/c-time-sub !			\ reset delta
   then ;

: prop-time	\ ( -- delta ) Propogate time.  Return delta, i.e. offset
		\ from start of second.
		\ Synchronization: user disables ints or calls from interrupt.
   s/c-time-sub @@ 1+ dup 1000 = if	\ if end of second reached
      drop 0				\ propagate into next second
      s/c-time 2@@ 1 0 d+ s/c-time 2!
      1 future-time-age +!		\ age future time
   then
   dup s/c-time-sub ! ;

: get-time	\ ( -- time-ls time-ms ) Return current time.
		\ Synchronization: disables interrupts.
   disable s/c-time 2@@ enable ;

: get-time-fine	\ ( -- time-sub time-ls time-ms ) Return current time with
		\ fractional (subsecond) time.
		\ Synchronization: disables interrupts.
   0 s/c-time-sub disable @@ 1000 um/mod nip s/c-time 2@@ enable ;

private:

endmodule>
@


0.1.0.29
log
@0.1.0.29
@
text
@@


0.1.0.40
log
@0.1.0.40
@
text
@d1 1
a1 1
\ (c) 2007 Johns Hopkins University / Applied Physics Laboratory
d7 11
a17 13
\ * Two times are kept.  Appropximately once every two seconds, the S/C
\ * sends a new time that is to be used on the next synchronization pulse.
\ * The 48-bit spacecraft time is converted to a 32-bit integer time and
\ * 16-bit millisecond time.  Between sync pulses, the time is propogated
\ * by an internal fixed-rate interrupt (1000Hz).  This fixed rate
\ * interrupt is also used to generate ~1Hz signals for the command and
\ * timing processes; a second "1PPS" clock measures this timing.  The 1PPS
\ * clock is synchronized to the S/C clock with a constant offset generated
\ * by a phase-locked loop.  To achieve this, the interval from 1PPS to
\ * 1PPS will be varied.  To meet the requirements of the common code
\ * (specifically, for MAC_DELAY to work as expected), the get-time
\ * function returns the 1PPS time, which will remain static between 1PPS
\ * occurrences.
d21 4
a24 17
\ Constants:
1000 constant #1pps-nom			\ nomimal 1PPS-to-1PPS interval
50 constant #1pps-maxerr		\   and maximum error to apply to
					\ #1pps-nom (milliseconds)
#1pps-nom 2/ constant #1pps-phase	\ goal phase between s/c whole second
					\   and 1PPS (milliseconds)

\ Variables: (subseconds are in milliseconds)
2variable future-time			\ time of next sync, whole seconds
variable future-time-sub		\   and subseconds
2variable s/c-time			\ current S/C time, whole seconds
variable s/c-time-sub			\   and subseconds
variable new-time			\ set when new time stamp arrives
2variable 1pps-time			\ 1PPS time, S/C time at 1PPS
variable delta-time			\   and subseconds wrt 1PPS
variable 1pps-interval			\ interval between 1PPS-to-1PPS
	#1pps-nom 1pps-interval !
d28 1
a28 2
: set-time	\ ( time-sub time-ls time-ms -- ) Set time of upcoming
		\ sync-time.
d30 7
a36 13
   disable				\ disable interrupts
   future-time 2!			\ set future time
      #1pps-nom um* nip future-time-sub !
   true new-time !			\ flag that time should be set
   enable ;

: sync-time	\ ( -- ) Set time (from set-time) to actual time.
		\ Propogate this new time until another set-time occurs.
		\ Synchronization: called from interrupt routine.
   new-time @@ if			\ if time set
      false new-time !
      future-time-sub @@ s/c-time-sub !	\ set time, subseconds
      future-time 2@@ s/c-time 2!	\   and whole seconds
d39 5
a43 7
: prop-time	\ ( -- delta ) Propogate time.  The S/C time is advanced.
		\ The internal 1PPS time is also advanced.  The 1PPS time
		\ is phase-locked to the S/C time; to do this, the interval
		\ from 1PPS to 1PPS is varied.
		\ Synchronization: called from interrupt routine.
   s/c-time-sub @@ 1+ dup #1pps-nom = if	\ propogate s/c time
      drop 0
d45 5
a49 11
   then s/c-time-sub !
   delta-time @@ 1+ dup			\ step delta time
   1pps-interval @@ = if			\ if end of 1pps interval reached
      s/c-time-sub @@ #1pps-phase swap -	\ measure phase error
	 #1pps-maxerr negate max #1pps-maxerr min
      #1pps-nom + 1pps-interval !	\ adjust 1pps interval
      drop 0
      s/c-time 2@@ 1 0 d+ 1pps-time 2!	\ sample s/c time for 1PPS time
   then dup delta-time ! ;
 
: get-time	\ ( -- time-ls time-ms ) Return current 1PPS time.
d51 1
a51 1
   disable 1pps-time 2@@ enable ;
d53 2
a54 4
: get-s/c-time	\ ( -- time-sub time-ls time-ms ) Return current S/C time with
		\ fractional (subsecond) time.  Note: s/c-time-sub can be 1000;
		\ this causes overflow in the divide, but the quotient is
		\ pegged at the largest possible value, in effect, 0.9999.
d56 1
a56 1
   disable 0 s/c-time-sub @@ #1pps-nom um/mod nip s/c-time 2@@ enable ;
@


0.1.0.77
log
@0.1.0.77
@
text
@d1 1
a1 1
\ (c) 2014 Johns Hopkins University / Applied Physics Laboratory
d7 13
a19 11
\ The function set-time sets the time of an upcoming time-tone; the
\ function sync-time, corresponding to the time-tone, sets the actual
\ time.  The function prop-time, called at 1kHz, propagates time between
\ the time-tones.  If sync-time stops (i.e. time-tones stop), prop-time
\ continues to propagate the time.  Set-time and sync-time will stop and
\ start together; when sync-time starts, the most recently received time
\ from set-time will be old.  Therefore, the time received by set-time is
\ "aged", and an old time will not be used by sync-time.  Prop-time
\ performs the aging function.  (In ground test, it is also possible to
\ create scenarios where sync-time occurs but set-time does not, e.g. in
\ raw mode.  The design above also handles this case.)
d23 17
a39 4
2variable future-time			\ time of next time tone
variable future-time-age		\ "age" of future time
2variable s/c-time			\ spacecraft time
variable s/c-time-sub			\ higher resolution time, 0 - 999 ms.
d43 2
a44 1
: set-time	\ ( time-ls time-ms -- ) Set time of upcoming sync-time.
d46 13
a58 7
   disable future-time 2!  0 future-time-age ! enable ;

: sync-time	\ ( -- ) Record time (from set-time) to actual time.
		\ Synchronization: user disables ints or calls from interrupt.
   future-time-age @@ 1 u<= if		\ if future time set recently
      future-time 2@@ s/c-time 2!	\ set time
      0 s/c-time-sub !			\ reset delta
d61 7
a67 5
: prop-time	\ ( -- delta ) Propogate time.  Return delta, i.e. offset
		\ from start of second.
		\ Synchronization: user disables ints or calls from interrupt.
   s/c-time-sub @@ 1+ dup 1000 = if	\ if end of second reached
      drop 0				\ propagate into next second
d69 11
a79 5
      1 future-time-age +!		\ age future time
   then
   dup s/c-time-sub ! ;

: get-time	\ ( -- time-ls time-ms ) Return current time.
d81 1
a81 1
   disable s/c-time 2@@ enable ;
d83 4
a86 2
: get-time-fine	\ ( -- time-sub time-ls time-ms ) Return current time with
		\ fractional (subsecond) time.
d88 1
a88 1
   0 s/c-time-sub disable @@ 1000 um/mod nip s/c-time 2@@ enable ;
@


0.1.0.78
log
@0.1.0.78
@
text
@d1 1
a1 1
\ (c) 2007 Johns Hopkins University / Applied Physics Laboratory
d7 11
a17 13
\ * Two times are kept.  Appropximately once every two seconds, the S/C
\ * sends a new time that is to be used on the next synchronization pulse.
\ * The 48-bit spacecraft time is converted to a 32-bit integer time and
\ * 16-bit millisecond time.  Between sync pulses, the time is propogated
\ * by an internal fixed-rate interrupt (1000Hz).  This fixed rate
\ * interrupt is also used to generate ~1Hz signals for the command and
\ * timing processes; a second "1PPS" clock measures this timing.  The 1PPS
\ * clock is synchronized to the S/C clock with a constant offset generated
\ * by a phase-locked loop.  To achieve this, the interval from 1PPS to
\ * 1PPS will be varied.  To meet the requirements of the common code
\ * (specifically, for MAC_DELAY to work as expected), the get-time
\ * function returns the 1PPS time, which will remain static between 1PPS
\ * occurrences.
d21 4
a24 17
\ Constants:
1000 constant #1pps-nom			\ nomimal 1PPS-to-1PPS interval
50 constant #1pps-maxerr		\   and maximum error to apply to
					\ #1pps-nom (milliseconds)
#1pps-nom 2/ constant #1pps-phase	\ goal phase between s/c whole second
					\   and 1PPS (milliseconds)

\ Variables: (subseconds are in milliseconds)
2variable future-time			\ time of next sync, whole seconds
variable future-time-sub		\   and subseconds
2variable s/c-time			\ current S/C time, whole seconds
variable s/c-time-sub			\   and subseconds
variable new-time			\ set when new time stamp arrives
2variable 1pps-time			\ 1PPS time, S/C time at 1PPS
variable delta-time			\   and subseconds wrt 1PPS
variable 1pps-interval			\ interval between 1PPS-to-1PPS
	#1pps-nom 1pps-interval !
d28 1
a28 2
: set-time	\ ( time-sub time-ls time-ms -- ) Set time of upcoming
		\ sync-time.
d30 7
a36 13
   disable				\ disable interrupts
   future-time 2!			\ set future time
      #1pps-nom um* nip future-time-sub !
   true new-time !			\ flag that time should be set
   enable ;

: sync-time	\ ( -- ) Set time (from set-time) to actual time.
		\ Propogate this new time until another set-time occurs.
		\ Synchronization: called from interrupt routine.
   new-time @@ if			\ if time set
      false new-time !
      future-time-sub @@ s/c-time-sub !	\ set time, subseconds
      future-time 2@@ s/c-time 2!	\   and whole seconds
d39 5
a43 7
: prop-time	\ ( -- delta ) Propogate time.  The S/C time is advanced.
		\ The internal 1PPS time is also advanced.  The 1PPS time
		\ is phase-locked to the S/C time; to do this, the interval
		\ from 1PPS to 1PPS is varied.
		\ Synchronization: called from interrupt routine.
   s/c-time-sub @@ 1+ dup #1pps-nom = if	\ propogate s/c time
      drop 0
d45 5
a49 11
   then s/c-time-sub !
   delta-time @@ 1+ dup			\ step delta time
   1pps-interval @@ = if			\ if end of 1pps interval reached
      s/c-time-sub @@ #1pps-phase swap -	\ measure phase error
	 #1pps-maxerr negate max #1pps-maxerr min
      #1pps-nom + 1pps-interval !	\ adjust 1pps interval
      drop 0
      s/c-time 2@@ 1 0 d+ 1pps-time 2!	\ sample s/c time for 1PPS time
   then dup delta-time ! ;
 
: get-time	\ ( -- time-ls time-ms ) Return current 1PPS time.
d51 1
a51 1
   disable 1pps-time 2@@ enable ;
d53 2
a54 4
: get-s/c-time	\ ( -- time-sub time-ls time-ms ) Return current S/C time with
		\ fractional (subsecond) time.  Note: s/c-time-sub can be 1000;
		\ this causes overflow in the divide, but the quotient is
		\ pegged at the largest possible value, in effect, 0.9999.
d56 1
a56 1
   disable 0 s/c-time-sub @@ #1pps-nom um/mod nip s/c-time 2@@ enable ;
@


0.1.0.101
log
@0.1.0.101
@
text
@d1 1
a1 1
\ (c) 2014 Johns Hopkins University / Applied Physics Laboratory
d7 13
a19 11
\ The function set-time sets the time of an upcoming time-tone; the
\ function sync-time, corresponding to the time-tone, sets the actual
\ time.  The function prop-time, called at 1kHz, propagates time between
\ the time-tones.  If sync-time stops (i.e. time-tones stop), prop-time
\ continues to propagate the time.  Set-time and sync-time will stop and
\ start together; when sync-time starts, the most recently received time
\ from set-time will be old.  Therefore, the time received by set-time is
\ "aged", and an old time will not be used by sync-time.  Prop-time
\ performs the aging function.  (In ground test, it is also possible to
\ create scenarios where sync-time occurs but set-time does not, e.g. in
\ raw mode.  The design above also handles this case.)
d23 17
a39 4
2variable future-time			\ time of next time tone
variable future-time-age		\ "age" of future time
2variable s/c-time			\ spacecraft time
variable s/c-time-sub			\ higher resolution time, 0 - 999 ms.
d43 2
a44 1
: set-time	\ ( time-ls time-ms -- ) Set time of upcoming sync-time.
d46 13
a58 7
   disable future-time 2!  0 future-time-age ! enable ;

: sync-time	\ ( -- ) Record time (from set-time) to actual time.
		\ Synchronization: user disables ints or calls from interrupt.
   future-time-age @@ 1 u<= if		\ if future time set recently
      future-time 2@@ s/c-time 2!	\ set time
      0 s/c-time-sub !			\ reset delta
d61 7
a67 5
: prop-time	\ ( -- delta ) Propogate time.  Return delta, i.e. offset
		\ from start of second.
		\ Synchronization: user disables ints or calls from interrupt.
   s/c-time-sub @@ 1+ dup 1000 = if	\ if end of second reached
      drop 0				\ propagate into next second
d69 11
a79 5
      1 future-time-age +!		\ age future time
   then
   dup s/c-time-sub ! ;

: get-time	\ ( -- time-ls time-ms ) Return current time.
d81 1
a81 1
   disable s/c-time 2@@ enable ;
d83 4
a86 2
: get-time-fine	\ ( -- time-sub time-ls time-ms ) Return current time with
		\ fractional (subsecond) time.
d88 1
a88 1
   0 s/c-time-sub disable @@ 1000 um/mod nip s/c-time 2@@ enable ;
@


0.1.0.102
log
@0.1.0.102
@
text
@d1 1
a1 1
\ (c) 2007 Johns Hopkins University / Applied Physics Laboratory
d7 11
a17 13
\ * Two times are kept.  Appropximately once every two seconds, the S/C
\ * sends a new time that is to be used on the next synchronization pulse.
\ * The 48-bit spacecraft time is converted to a 32-bit integer time and
\ * 16-bit millisecond time.  Between sync pulses, the time is propogated
\ * by an internal fixed-rate interrupt (1000Hz).  This fixed rate
\ * interrupt is also used to generate ~1Hz signals for the command and
\ * timing processes; a second "1PPS" clock measures this timing.  The 1PPS
\ * clock is synchronized to the S/C clock with a constant offset generated
\ * by a phase-locked loop.  To achieve this, the interval from 1PPS to
\ * 1PPS will be varied.  To meet the requirements of the common code
\ * (specifically, for MAC_DELAY to work as expected), the get-time
\ * function returns the 1PPS time, which will remain static between 1PPS
\ * occurrences.
d21 4
a24 17
\ Constants:
1000 constant #1pps-nom			\ nomimal 1PPS-to-1PPS interval
50 constant #1pps-maxerr		\   and maximum error to apply to
					\ #1pps-nom (milliseconds)
#1pps-nom 2/ constant #1pps-phase	\ goal phase between s/c whole second
					\   and 1PPS (milliseconds)

\ Variables: (subseconds are in milliseconds)
2variable future-time			\ time of next sync, whole seconds
variable future-time-sub		\   and subseconds
2variable s/c-time			\ current S/C time, whole seconds
variable s/c-time-sub			\   and subseconds
variable new-time			\ set when new time stamp arrives
2variable 1pps-time			\ 1PPS time, S/C time at 1PPS
variable delta-time			\   and subseconds wrt 1PPS
variable 1pps-interval			\ interval between 1PPS-to-1PPS
	#1pps-nom 1pps-interval !
d28 1
a28 2
: set-time	\ ( time-sub time-ls time-ms -- ) Set time of upcoming
		\ sync-time.
d30 7
a36 13
   disable				\ disable interrupts
   future-time 2!			\ set future time
      #1pps-nom um* nip future-time-sub !
   true new-time !			\ flag that time should be set
   enable ;

: sync-time	\ ( -- ) Set time (from set-time) to actual time.
		\ Propogate this new time until another set-time occurs.
		\ Synchronization: called from interrupt routine.
   new-time @@ if			\ if time set
      false new-time !
      future-time-sub @@ s/c-time-sub !	\ set time, subseconds
      future-time 2@@ s/c-time 2!	\   and whole seconds
d39 5
a43 7
: prop-time	\ ( -- delta ) Propogate time.  The S/C time is advanced.
		\ The internal 1PPS time is also advanced.  The 1PPS time
		\ is phase-locked to the S/C time; to do this, the interval
		\ from 1PPS to 1PPS is varied.
		\ Synchronization: called from interrupt routine.
   s/c-time-sub @@ 1+ dup #1pps-nom = if	\ propogate s/c time
      drop 0
d45 5
a49 11
   then s/c-time-sub !
   delta-time @@ 1+ dup			\ step delta time
   1pps-interval @@ = if			\ if end of 1pps interval reached
      s/c-time-sub @@ #1pps-phase swap -	\ measure phase error
	 #1pps-maxerr negate max #1pps-maxerr min
      #1pps-nom + 1pps-interval !	\ adjust 1pps interval
      drop 0
      s/c-time 2@@ 1 0 d+ 1pps-time 2!	\ sample s/c time for 1PPS time
   then dup delta-time ! ;
 
: get-time	\ ( -- time-ls time-ms ) Return current 1PPS time.
d51 1
a51 1
   disable 1pps-time 2@@ enable ;
d53 2
a54 4
: get-s/c-time	\ ( -- time-sub time-ls time-ms ) Return current S/C time with
		\ fractional (subsecond) time.  Note: s/c-time-sub can be 1000;
		\ this causes overflow in the divide, but the quotient is
		\ pegged at the largest possible value, in effect, 0.9999.
d56 1
a56 1
   disable 0 s/c-time-sub @@ #1pps-nom um/mod nip s/c-time 2@@ enable ;
@


0.1.0.103
log
@0.1.0.103
@
text
@d61 1
a61 1
: Xprop-time	\ ( -- delta ) Propogate time.  The S/C time is advanced.
d77 1
a77 2
   then dup delta-time ! 
   ;
a78 10
: prop-time     \ ( -- delta ) Propogate time.  Return delta, i.e. offset
                \ from start of second.
                \ Synchronization: user disables ints or calls from interrupt.
   s/c-time-sub @@ 1+ dup 1000 = if      \ if end of second reached
      drop 0                            \ propagate into next second
      s/c-time 2@@ 1 0 d+ s/c-time 2!
      1 future-time-age +!              \ age future time
   then
   dup s/c-time-sub ! ;

@


0.1.0.104
log
@0.1.0.104
@
text
@d86 1
@


0.1.0.106
log
@0.1.0.106
@
text
@d1 1
a1 1
\ (c) 2014 Johns Hopkins University / Applied Physics Laboratory
d7 13
a19 11
\ The function set-time sets the time of an upcoming time-tone; the
\ function sync-time, corresponding to the time-tone, sets the actual
\ time.  The function prop-time, called at 1kHz, propagates time between
\ the time-tones.  If sync-time stops (i.e. time-tones stop), prop-time
\ continues to propagate the time.  Set-time and sync-time will stop and
\ start together; when sync-time starts, the most recently received time
\ from set-time will be old.  Therefore, the time received by set-time is
\ "aged", and an old time will not be used by sync-time.  Prop-time
\ performs the aging function.  (In ground test, it is also possible to
\ create scenarios where sync-time occurs but set-time does not, e.g. in
\ raw mode.  The design above also handles this case.)
d23 17
a39 4
2variable future-time			\ time of next time tone
variable future-time-age		\ "age" of future time
2variable s/c-time			\ spacecraft time
variable s/c-time-sub			\ higher resolution time, 0 - 999 ms.
d43 2
a44 1
: set-time	\ ( time-ls time-ms -- ) Set time of upcoming sync-time.
d46 13
a58 7
   disable future-time 2!  0 future-time-age ! enable ;

: sync-time	\ ( -- ) Record time (from set-time) to actual time.
		\ Synchronization: user disables ints or calls from interrupt.
   future-time-age @@ 1 u<= if		\ if future time set recently
      future-time 2@@ s/c-time 2!	\ set time
      0 s/c-time-sub !			\ reset delta
d61 24
a84 5
: prop-time	\ ( -- delta ) Propogate time.  Return delta, i.e. offset
		\ from start of second.
		\ Synchronization: user disables ints or calls from interrupt.
   s/c-time-sub @@ 1+ dup 1000 = if	\ if end of second reached
      drop 0				\ propagate into next second
a85 1
      1 future-time-age +!		\ age future time
d89 1
a89 1
: get-time	\ ( -- time-ls time-ms ) Return current time.
d91 1
a91 1
   disable s/c-time 2@@ enable ;
d93 4
a96 2
: get-time-fine	\ ( -- time-sub time-ls time-ms ) Return current time with
		\ fractional (subsecond) time.
d98 1
a98 1
   0 s/c-time-sub disable @@ 1000 um/mod nip s/c-time 2@@ enable ;
@


0.1.0.109
log
@0.1.0.109
@
text
@d28 1
a28 5
: set-time	\ ( time-sub time-ls time-ms -- ) Set time of upcoming sync-time.
		\ Synchronization: disables interrupts.
   disable future-time 2!  0 future-time-age ! drop enable ;

: Xset-time	\ ( time-ls time-ms -- ) Set time of upcoming sync-time.
@


0.1.0.114
log
@0.1.0.114
@
text
@d28 5
a32 1
: set-time	\ ( time-ls time-ms -- ) Set time of upcoming sync-time.
@


0.1.0.123
log
@0.1.0.123
@
text
@@


0.1.0.129
log
@0.1.0.129
@
text
@d1 1
a1 1
\ (c) 2007 Johns Hopkins University / Applied Physics Laboratory
d7 11
a17 13
\ * Two times are kept.  Appropximately once every two seconds, the S/C
\ * sends a new time that is to be used on the next synchronization pulse.
\ * The 48-bit spacecraft time is converted to a 32-bit integer time and
\ * 16-bit millisecond time.  Between sync pulses, the time is propogated
\ * by an internal fixed-rate interrupt (1000Hz).  This fixed rate
\ * interrupt is also used to generate ~1Hz signals for the command and
\ * timing processes; a second "1PPS" clock measures this timing.  The 1PPS
\ * clock is synchronized to the S/C clock with a constant offset generated
\ * by a phase-locked loop.  To achieve this, the interval from 1PPS to
\ * 1PPS will be varied.  To meet the requirements of the common code
\ * (specifically, for MAC_DELAY to work as expected), the get-time
\ * function returns the 1PPS time, which will remain static between 1PPS
\ * occurrences.
d21 4
a24 17
\ Constants:
1000 constant #1pps-nom			\ nomimal 1PPS-to-1PPS interval
50 constant #1pps-maxerr		\   and maximum error to apply to
					\ #1pps-nom (milliseconds)
#1pps-nom 2/ constant #1pps-phase	\ goal phase between s/c whole second
					\   and 1PPS (milliseconds)

\ Variables: (subseconds are in milliseconds)
2variable future-time			\ time of next sync, whole seconds
variable future-time-sub		\   and subseconds
2variable s/c-time			\ current S/C time, whole seconds
variable s/c-time-sub			\   and subseconds
variable new-time			\ set when new time stamp arrives
2variable 1pps-time			\ 1PPS time, S/C time at 1PPS
variable delta-time			\   and subseconds wrt 1PPS
variable 1pps-interval			\ interval between 1PPS-to-1PPS
    #1pps-nom 1pps-interval !
d28 1
a28 2
: set-time	\ ( time-sub time-ls time-ms -- ) Set time of upcoming
		\ sync-time.
d30 7
a36 13
   disable				\ disable interrupts
   future-time 2!			\ set future time
      #1pps-nom um* nip future-time-sub !
   true new-time !			\ flag that time should be set
   enable ;

: sync-time	\ ( -- ) Set time (from set-time) to actual time.
		\ Propogate this new time until another set-time occurs.
		\ Synchronization: called from interrupt routine.
   new-time @@ if			\ if time set
      false new-time !
      future-time-sub @@ s/c-time-sub !	\ set time, subseconds
      future-time 2@@ s/c-time 2!	\   and whole seconds
d39 5
a43 8
: prop-time	\ ( -- delta ) Propogate time.  The S/C time is advanced.
		\ The internal 1PPS time is also advanced.  The 1PPS time
		\ is phase-locked to the S/C time; to do this, the interval
		\ from 1PPS to 1PPS is varied.
		\ Synchronization: called from interrupt routine.

   s/c-time-sub @@ 1+ dup #1pps-nom = if	\ propogate s/c time
      drop 0
d45 3
a47 3
   then s/c-time-sub !


d49 1
a49 17
[ifdef] _XXX
   delta-time @@ 1+ dup			\ step delta time
   1pps-interval @@ = if			\ if end of 1pps interval reached
      h# 39 xxx
      s/c-time-sub @@ #1pps-phase swap -	\ measure phase error
	 #1pps-maxerr negate max #1pps-maxerr min
      #1pps-nom + 1pps-interval !	\ adjust 1pps interval
      drop 0
      s/c-time 2@@ 1 0 d+ 1pps-time 2!	\ sample s/c time for 1PPS time
   then dup delta-time ! 
[then]

   s/c-time-sub @@ 

   ;
 
: get-time	\ ( -- time-ls time-ms ) Return current 1PPS time.
d51 1
a51 1
   disable 1pps-time 2@@ enable ;
d53 2
a54 4
: get-s/c-time	\ ( -- time-sub time-ls time-ms ) Return current S/C time with
		\ fractional (subsecond) time.  Note: s/c-time-sub can be 1000;
		\ this causes overflow in the divide, but the quotient is
		\ pegged at the largest possible value, in effect, 0.9999.
d56 1
a56 1
   disable 0 s/c-time-sub @@ #1pps-nom um/mod nip s/c-time 2@@ enable ;
@


0.1.0.139
log
@0.1.0.139
@
text
@@


0.1.0.148
log
@0.1.0.148
@
text
@d74 1
a74 2
[ifdef] ___TRAIN_TIME___

d77 1
a83 1

@


0.1.0.150
log
@0.1.0.150
@
text
@a71 1
   \ \\\ s/c-time-sub @@ 
d73 2
a74 1
[ifndef] ___TRAIN_TIME___
d87 1
@


0.1.0.163
log
@0.1.0.163
@
text
@d6 15
d62 4
d71 17
@


0.1.0.168
log
@0.1.0.168
@
text
@a5 15

\ * Two times are kept.  Appropximately once every two seconds, the S/C
\ * sends a new time that is to be used on the next synchronization pulse.
\ * The 48-bit spacecraft time is converted to a 32-bit integer time and
\ * 16-bit millisecond time.  Between sync pulses, the time is propogated
\ * by an internal fixed-rate interrupt (1000Hz).  This fixed rate
\ * interrupt is also used to generate ~1Hz signals for the command and
\ * timing processes; a second "1PPS" clock measures this timing.  The 1PPS
\ * clock is synchronized to the S/C clock with a constant offset generated
\ * by a phase-locked loop.  To achieve this, the interval from 1PPS to
\ * 1PPS will be varied.  To meet the requirements of the common code
\ * (specifically, for MAC_DELAY to work as expected), the get-time
\ * function returns the 1PPS time, which will remain static between 1PPS
\ * occurrences.

a46 4
		\ The internal 1PPS time is also advanced.  The 1PPS time
		\ is phase-locked to the S/C time; to do this, the interval
		\ from 1PPS to 1PPS is varied.
		\ Synchronization: called from interrupt routine.
a51 12

[ifndef] _XXX
   delta-time @@ 1+ dup			\ step delta time
   1pps-interval @@ = if			\ if end of 1pps interval reached
      s/c-time-sub @@ #1pps-phase swap -	\ measure phase error
	 #1pps-maxerr negate max #1pps-maxerr min
      #1pps-nom + 1pps-interval !	\ adjust 1pps interval
      drop 0
      s/c-time 2@@ 1 0 d+ 1pps-time 2!	\ sample s/c time for 1PPS time
   then dup delta-time ! 
[then]

@


0.1.0.204
log
@0.1.0.204
@
text
@@


0.1.0.237
log
@0.1.0.237
@
text
@d72 1
a72 1
[ifdef] _XXX___
@


0.1.0.238
log
@0.1.0.238
@
text
@d72 1
a72 1
[ifndef] _XXX___
@


0.1.0.239
log
@0.1.0.239
@
text
@d24 1
a24 1
d# 1000 constant #1pps-nom			\ nomimal 1PPS-to-1PPS interval
d70 1
a70 1
   then dup s/c-time-sub !
d72 1
a72 1
[ifdef] ___XXX___
@


0.1.0.240
log
@0.1.0.240
@
text
@d62 3
d71 12
@


0.1.0.241
log
@0.1.0.241
@
text
@d37 1
@


0.1.0.242
log
@0.1.0.242
@
text
@d37 2
@


0.1.0.243
log
@0.1.0.243
@
text
@d27 2
@


0.1.0.250
log
@0.1.0.250
@
text
@d25 1
@


0.1.0.254
log
@0.1.0.254
@
text
@a36 3
\ This is called when the time message arrives. The message 
\ is scheduled to precede the associated PPS.

a45 3
\ This word is called when the PPS arrives. This means that
\ NOW is the time in the message received earlier.

d66 1
a66 2
   \ disable 1pps-time 2@@ enable ; WAS GAM 2018-09-21
   disable s/c-time 2@@ enable ;
@


0.1.0.255
log
@0.1.0.255
@
text
@d33 1
@
