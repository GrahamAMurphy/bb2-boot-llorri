head	0.1;
access;
symbols;
locks
	murphy:0.1.0.204; strict;
comment	@# @;


0.1
date	2018.02.20.16.37.38;	author murphy;	state Exp;
branches
	0.1.0.29;
next	;

0.1.0.29
date	2018.02.20.16.37.38;	author murphy;	state Exp;
branches;
next	0.1.0.123;

0.1.0.123
date	2018.04.13.02.04.43;	author murphy;	state Exp;
branches;
next	0.1.0.139;

0.1.0.139
date	2018.04.13.20.05.41;	author murphy;	state Exp;
branches;
next	0.1.0.204;

0.1.0.204
date	2018.09.18.14.18.35;	author murphy;	state Exp;
branches;
next	;


desc
@2018-02-20 11:25:33 gam-1
@


0.1
log
@0.1
@
text
@\ (c) 2008 Johns Hopkins University / Applied Physics Laboratory
\ Useful extensions
decimal

: erase		\ ( addr len -- ) Fill given array of bytes will zero.
   0 fill ;

: |		\ ( addr x -- addr++ ) Array initialization.
   over !  cell+ ;

: c|		\ ( addr c -- addr++ ) Array initialization.
   over c!  1+ ;

: 2|		\ ( addr xms xls -- addr++ ) Array initialization.
		\ Note: ls on top
   2pick cell+ !  over !  2 cells + ;

: here-allot	\ ( size -- addr ) Allocate local memory and return address.
   here swap allot ;

: reserved	\ ( offset size -- offset' ) Extend struct.fr.  Allocate
		\ reserved field in data structure of given size.
   + ;

: between	\ ( u1|n1 u2|n2 u3|n3 -- t/f ) Return true iff u1|n1 is
		\ between u2|n2 and u3|n3 inclusive.
   over - >r - r> u> not ;

: u<=		\ ( u1 u2 -- t/f ) Return true iff u1<=u2.
   u> not || ; inline

: u>=		\ ( u1 u2 -- t/f ) Return true iff u1>=u2.
   u< not || ; inline

: du<		\ ( du1-ls du1-ms du2-ls du2-ms -- t/f ) Return true iff
		\ du1 is less than du2.
   >r over r@@ - if drop nip r> u< else r> drop nip u< then ;

: u/		\ ( u1 u2 -- u1/u2 ) Unsigned single divide.
  0 swap um/mod nip ;

: u/^		\ ( u1 u2 -- u1/u2 ) Unsigned single divide.  Non-integral
		\ results are rounded up.
  0 swap um/mod swap if 1+ then ;

: split		\ ( x -- u1 u2 ) Split x into two bytes.  The ms byte is on top.
   dup h# ff and swap 8 rshift ;

: join		\ ( u1 u2 -- x ) Join two bytes.  The ms byte is on top.
		\ Precondition: u1 < 256.
   8 lshift or ;

: pow2		\ ( n -- 2^n ) Return nth power of 2.
   1 swap lshift ;

: mask		\ ( n -- mask ) Return a mask n bits long.
   1 swap lshift 1- ;
@


0.1.0.29
log
@0.1.0.29
@
text
@@


0.1.0.123
log
@0.1.0.123
@
text
@@


0.1.0.139
log
@0.1.0.139
@
text
@@


0.1.0.204
log
@0.1.0.204
@
text
@@
